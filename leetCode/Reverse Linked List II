class Solution(object):
    def reverseBetween(self, head, left, right):
        """
        :type head: Optional[ListNode]
        :type left: int
        :type right: int
        :rtype: Optional[ListNode]
        """
        if not head or left == right:
            return head  # No need to reverse if there's only one node or no range
        
        dummy = ListNode(0)  # Dummy node to simplify edge cases
        dummy.next = head
        prev = dummy  # `prev` will point to node before `left`
        
        # Step 1: Move `prev` to the node before `left`
        for _ in range(left - 1):
            prev = prev.next
        
        # Step 2: Reverse the sublist from `left` to `right`
        reverse_start = prev.next  # First node of the reversed section
        curr = reverse_start.next  # Node to be reversed
        
        for _ in range(right - left):  # Reverse `right - left` times
            next_node = curr.next
            curr.next = prev.next
            prev.next = curr
            reverse_start.next = next_node
            curr = next_node  # Move to the next node

        return dummy.next  # Return the updated list
